use serde::{Deserialize, Serialize};
use chrono::{DateTime, Utc};
use tokio_postgres::Row;

#[derive(Debug, Serialize, Deserialize)]
pub struct Swap {
    pub id: i32,
    pub pool: String,
    pub start_time: DateTime<Utc>,
    pub end_time: DateTime<Utc>,
    pub to_asset_count: i64,
    pub to_rune_count: i64,
    pub to_trade_count: i64,
    pub from_trade_count: i64,
    pub synth_mint_count: i64,
    pub synth_redeem_count: i64,
    pub total_count: i64,
    pub to_asset_volume: i64,
    pub to_rune_volume: i64,
    pub to_trade_volume: i64,
    pub from_trade_volume: i64,
    pub synth_mint_volume: i64,
    pub synth_redeem_volume: i64,
    pub total_volume: i64,
    pub to_asset_volume_usd: i64,
    pub to_rune_volume_usd: i64,
    pub to_trade_volume_usd: i64,
    pub from_trade_volume_usd: i64,
    pub synth_mint_volume_usd: i64,
    pub synth_redeem_volume_usd: i64,
    pub total_volume_usd: i64,
    pub to_asset_fees: i64,
    pub to_rune_fees: i64,
    pub to_trade_fees: i64,
    pub from_trade_fees: i64,
    pub synth_mint_fees: i64,
    pub synth_redeem_fees: i64,
    pub total_fees: i64,
    pub to_asset_average_slip: f64,
    pub to_rune_average_slip: f64,
    pub to_trade_average_slip: f64,
    pub from_trade_average_slip: f64,
    pub synth_mint_average_slip: f64,
    pub synth_redeem_average_slip: f64,
    pub average_slip: f64,
    pub rune_price_usd: f64,
}

impl From<Row> for Swap {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            pool: row.get("pool"),
            start_time: row.get("start_time"),
            end_time: row.get("end_time"),
            to_asset_count: row.get("to_asset_count"),
            to_rune_count: row.get("to_rune_count"),
            to_trade_count: row.get("to_trade_count"),
            from_trade_count: row.get("from_trade_count"),
            synth_mint_count: row.get("synth_mint_count"),
            synth_redeem_count: row.get("synth_redeem_count"),
            total_count: row.get("total_count"),
            to_asset_volume: row.get("to_asset_volume"),
            to_rune_volume: row.get("to_rune_volume"),
            to_trade_volume: row.get("to_trade_volume"),
            from_trade_volume: row.get("from_trade_volume"),
            synth_mint_volume: row.get("synth_mint_volume"),
            synth_redeem_volume: row.get("synth_redeem_volume"),
            total_volume: row.get("total_volume"),
            to_asset_volume_usd: row.get("to_asset_volume_usd"),
            to_rune_volume_usd: row.get("to_rune_volume_usd"),
            to_trade_volume_usd: row.get("to_trade_volume_usd"),
            from_trade_volume_usd: row.get("from_trade_volume_usd"),
            synth_mint_volume_usd: row.get("synth_mint_volume_usd"),
            synth_redeem_volume_usd: row.get("synth_redeem_volume_usd"),
            total_volume_usd: row.get("total_volume_usd"),
            to_asset_fees: row.get("to_asset_fees"),
            to_rune_fees: row.get("to_rune_fees"),
            to_trade_fees: row.get("to_trade_fees"),
            from_trade_fees: row.get("from_trade_fees"),
            synth_mint_fees: row.get("synth_mint_fees"),
            synth_redeem_fees: row.get("synth_redeem_fees"),
            total_fees: row.get("total_fees"),
            to_asset_average_slip: row.get("to_asset_average_slip"),
            to_rune_average_slip: row.get("to_rune_average_slip"),
            to_trade_average_slip: row.get("to_trade_average_slip"),
            from_trade_average_slip: row.get("from_trade_average_slip"),
            synth_mint_average_slip: row.get("synth_mint_average_slip"),
            synth_redeem_average_slip: row.get("synth_redeem_average_slip"),
            average_slip: row.get("average_slip"),
            rune_price_usd: row.get("rune_price_usd"),
        }
    }
}